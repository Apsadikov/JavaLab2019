import java.util.HashMap;
import java.util.Map;

public class MimeHelper {
    private static HashMap<String, String> mimeTypeMapping = new HashMap<>();

    private static void init() {
        mimeTypeMapping.put("rtf", "text/rtf");
        mimeTypeMapping.put("rtx", "text/richtext");
        mimeTypeMapping.put("html", "text/html");
        mimeTypeMapping.put("htm", "text/html");
        mimeTypeMapping.put("zip", "application/zip");
        mimeTypeMapping.put("rar", "application/x-rar-compressed");
        mimeTypeMapping.put("gzip", "application/x-gzip");
        mimeTypeMapping.put("gz", "application/x-gzip");
        mimeTypeMapping.put("tgz", "application/tgz");
        mimeTypeMapping.put("tar", "application/x-tar");
        mimeTypeMapping.put("gif", "image/gif");
        mimeTypeMapping.put("jpeg", "image/jpeg");
        mimeTypeMapping.put("jpg", "image/jpeg");
        mimeTypeMapping.put("jpe", "image/jpeg");
        mimeTypeMapping.put("tiff", "image/tiff");
        mimeTypeMapping.put("tif", "image/tiff");
        mimeTypeMapping.put("png", "image/png");
        mimeTypeMapping.put("au", "audio/basic");
        mimeTypeMapping.put("snd", "audio/basic");
        mimeTypeMapping.put("wav", "audio/x-wav");
        mimeTypeMapping.put("mov", "video/quicktime");
        mimeTypeMapping.put("qt", "video/quicktime");
        mimeTypeMapping.put("mpeg", "video/mpeg");
        mimeTypeMapping.put("mpg", "video/mpeg");
        mimeTypeMapping.put("mpe", "video/mpeg");
        mimeTypeMapping.put("abs", "video/mpeg");
        mimeTypeMapping.put("doc", "application/msword");
        mimeTypeMapping.put("xls", "application/vnd.ms-excel");
        mimeTypeMapping.put("eps", "application/postscript");
        mimeTypeMapping.put("ai", "application/postscript");
        mimeTypeMapping.put("ps", "application/postscript");
        mimeTypeMapping.put("pdf", "application/pdf");
        mimeTypeMapping.put("jar", "application/java-archive");
        mimeTypeMapping.put("exe", "application/octet-stream");
        mimeTypeMapping.put("dll", "application/octet-stream");
        mimeTypeMapping.put("class", "application/octet-stream");
        mimeTypeMapping.put("gram", "application/srgs");
        mimeTypeMapping.put("smil", "application/smil");
        mimeTypeMapping.put("smi", "application/smil");
        mimeTypeMapping.put("rdf", "application/rdf+xml");
        mimeTypeMapping.put("ogg", "application/x-ogg");
        mimeTypeMapping.put("oda", "application/oda");
        mimeTypeMapping.put("dmg", "application/octet-stream");
        mimeTypeMapping.put("lzh", "application/octet-stream");
        mimeTypeMapping.put("so", "application/octet-stream");
        mimeTypeMapping.put("lha", "application/octet-stream");
        mimeTypeMapping.put("dms", "application/octet-stream");
        mimeTypeMapping.put("bin", "application/octet-stream");
        mimeTypeMapping.put("mathml", "application/mathml+xml");
        mimeTypeMapping.put("cpt", "application/mac-compactpro");
        mimeTypeMapping.put("hqx", "application/mac-binhex40");
        mimeTypeMapping.put("jnlp", "application/jnlp");
        mimeTypeMapping.put("ez", "application/andrew-inset");
        mimeTypeMapping.put("txt", "text/plain");
        mimeTypeMapping.put("ini", "text/plain");
        mimeTypeMapping.put("c", "text/plain");
        mimeTypeMapping.put("h", "text/plain");
        mimeTypeMapping.put("cpp", "text/plain");
        mimeTypeMapping.put("cxx", "text/plain");
        mimeTypeMapping.put("cc", "text/plain");
        mimeTypeMapping.put("chh", "text/plain");
        mimeTypeMapping.put("java", "text/plain");
        mimeTypeMapping.put("csv", "text/plain");
        mimeTypeMapping.put("bat", "text/plain");
        mimeTypeMapping.put("cmd", "text/plain");
        mimeTypeMapping.put("asc", "text/plain");
        mimeTypeMapping.put("xul", "application/vnd.mozilla.xul+xml");
        mimeTypeMapping.put("cdf", "application/x-netcdf");
        mimeTypeMapping.put("nc", "application/x-netcdf");
        mimeTypeMapping.put("latex", "application/x-latex");
        mimeTypeMapping.put("skm", "application/x-koan");
        mimeTypeMapping.put("skt", "application/x-koan");
        mimeTypeMapping.put("skd", "application/x-koan");
        mimeTypeMapping.put("skp", "application/x-koan");
        mimeTypeMapping.put("js", "application/x-javascript");
        mimeTypeMapping.put("hdf", "application/x-hdf");
        mimeTypeMapping.put("gtar", "application/x-gtar");
        mimeTypeMapping.put("spl", "application/x-futuresplash");
        mimeTypeMapping.put("dvi", "application/x-dvi");
        mimeTypeMapping.put("dxr", "application/x-director");
        mimeTypeMapping.put("dir", "application/x-director");
        mimeTypeMapping.put("dcr", "application/x-director");
        mimeTypeMapping.put("csh", "application/x-csh");
        mimeTypeMapping.put("cpio", "application/x-cpio");
        mimeTypeMapping.put("pgn", "application/x-chess-pgn");
        mimeTypeMapping.put("vcd", "application/x-cdlink");
        mimeTypeMapping.put("bcpio", "application/x-bcpio");
        mimeTypeMapping.put("rm", "application/vnd.rn-realmedia");
        mimeTypeMapping.put("ppt", "application/vnd.ms-powerpoint");
        mimeTypeMapping.put("mif", "application/vnd.mif");
        mimeTypeMapping.put("grxml", "application/srgs+xml");
        mimeTypeMapping.put("json", "application/json");
        mimeTypeMapping.put("ice", "x-conference/x-cooltalk");
        mimeTypeMapping.put("movie", "video/x-sgi-movie");
        mimeTypeMapping.put("avi", "video/vnd.mpegurl");
        mimeTypeMapping.put("wmv", "video/x-ms-wmv");
        mimeTypeMapping.put("m4u", "video/vnd.mpegurl");
        mimeTypeMapping.put("mxu", "video/vnd.mpegurl");
        mimeTypeMapping.put("htc", "text/x-component");
        mimeTypeMapping.put("etx", "text/x-setext");
        mimeTypeMapping.put("wmls", "text/vnd.wap.wmlscript");
        mimeTypeMapping.put("wml", "text/vnd.wap.wml");
        mimeTypeMapping.put("tsv", "text/tab-separated-values");
        mimeTypeMapping.put("sgm", "text/sgml");
        mimeTypeMapping.put("sgml", "text/sgml");
        mimeTypeMapping.put("css", "text/css");
        mimeTypeMapping.put("ifb", "text/calendar");
        mimeTypeMapping.put("ics", "text/calendar");
        mimeTypeMapping.put("wrl", "model/vrml");
        mimeTypeMapping.put("vrlm", "model/vrml");
        mimeTypeMapping.put("silo", "model/mesh");
        mimeTypeMapping.put("mesh", "model/mesh");
        mimeTypeMapping.put("msh", "model/mesh");
        mimeTypeMapping.put("iges", "model/iges");
        mimeTypeMapping.put("igs", "model/iges");
        mimeTypeMapping.put("rgb", "image/x-rgb");
        mimeTypeMapping.put("ppm", "image/x-portable-pixmap");
        mimeTypeMapping.put("pgm", "image/x-portable-graymap");
        mimeTypeMapping.put("pbm", "image/x-portable-bitmap");
        mimeTypeMapping.put("pnm", "image/x-portable-anymap");
        mimeTypeMapping.put("ico", "image/x-icon");
        mimeTypeMapping.put("ras", "image/x-cmu-raster");
        mimeTypeMapping.put("wbmp", "image/vnd.wap.wbmp");
        mimeTypeMapping.put("djv", "image/vnd.djvu");
        mimeTypeMapping.put("djvu", "image/vnd.djvu");
        mimeTypeMapping.put("svg", "image/svg+xml");
        mimeTypeMapping.put("ief", "image/ief");
        mimeTypeMapping.put("cgm", "image/cgm");
        mimeTypeMapping.put("bmp", "image/bmp");
        mimeTypeMapping.put("xyz", "chemical/x-xyz");
        mimeTypeMapping.put("pdb", "chemical/x-pdb");
        mimeTypeMapping.put("ra", "audio/x-pn-realaudio");
        mimeTypeMapping.put("ram", "audio/x-pn-realaudio");
        mimeTypeMapping.put("m3u", "audio/x-mpegurl");
        mimeTypeMapping.put("aifc", "audio/x-aiff");
        mimeTypeMapping.put("aif", "audio/x-aiff");
        mimeTypeMapping.put("aiff", "audio/x-aiff");
        mimeTypeMapping.put("mp3", "audio/mpeg");
        mimeTypeMapping.put("mp2", "audio/mpeg");
        mimeTypeMapping.put("mp1", "audio/mpeg");
        mimeTypeMapping.put("mpga", "audio/mpeg");
        mimeTypeMapping.put("kar", "audio/midi");
        mimeTypeMapping.put("mid", "audio/midi");
        mimeTypeMapping.put("midi", "audio/midi");
        mimeTypeMapping.put("dtd", "application/xml-dtd");
        mimeTypeMapping.put("xsl", "application/xml");
        mimeTypeMapping.put("xml", "application/xml");
        mimeTypeMapping.put("xslt", "application/xslt+xml");
        mimeTypeMapping.put("xht", "application/xhtml+xml");
        mimeTypeMapping.put("xhtml", "application/xhtml+xml");
        mimeTypeMapping.put("src", "application/x-wais-source");
        mimeTypeMapping.put("ustar", "application/x-ustar");
        mimeTypeMapping.put("ms", "application/x-troff-ms");
        mimeTypeMapping.put("me", "application/x-troff-me");
        mimeTypeMapping.put("man", "application/x-troff-man");
        mimeTypeMapping.put("roff", "application/x-troff");
        mimeTypeMapping.put("tr", "application/x-troff");
        mimeTypeMapping.put("t", "application/x-troff");
        mimeTypeMapping.put("texi", "application/x-texinfo");
        mimeTypeMapping.put("texinfo", "application/x-texinfo");
        mimeTypeMapping.put("tex", "application/x-tex");
        mimeTypeMapping.put("tcl", "application/x-tcl");
        mimeTypeMapping.put("sv4crc", "application/x-sv4crc");
        mimeTypeMapping.put("sv4cpio", "application/x-sv4cpio");
        mimeTypeMapping.put("sit", "application/x-stuffit");
        mimeTypeMapping.put("swf", "application/x-shockwave-flash");
        mimeTypeMapping.put("shar", "application/x-shar");
        mimeTypeMapping.put("sh", "application/x-sh");
    }

    public static String getExtension(String contentType) {
        if (mimeTypeMapping.size() == 0) init();
        for (Map.Entry<String, String> mime : mimeTypeMapping.entrySet()) {
            if (mime.getValue().equals(contentType)) {
                return mime.getKey();
            }
        }
        return "txt";
    }
}
